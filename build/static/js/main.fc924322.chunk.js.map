{"version":3,"sources":["components/Employees.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Employees","state","employeeRecords","componentDidMount","axios","get","then","response","i","data","results","length","employee","picture","alt","name","first","last","src","medium","firstName","lastName","email","phoneNum","cell","push","console","log","setState","employeeData","columns","label","field","sort","width","rows","this","bordered","responsive","striped","Component","Header","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qUAsFeA,E,4MA7EXC,MAAQ,CACJC,gBAAiB,I,EAIrBC,kBAAoB,WAChBC,IAAMC,IAAI,iDACLC,MAAK,SAAAC,GAGF,IADA,IAAIL,EAAkB,GACbM,EAAI,EAAGA,EAAID,EAASE,KAAKC,QAAQC,OAAQH,IAAK,CACnD,IAAII,EAAW,CACXC,QAAS,yBAAKC,IAAG,UAAKP,EAASE,KAAKC,QAAQF,GAAGO,KAAKC,MAAnC,YAA4CT,EAASE,KAAKC,QAAQF,GAAGO,KAAKE,MAAQC,IAAG,UAAKX,EAASE,KAAKC,QAAQF,GAAGK,QAAQM,UAC5IC,UAAWb,EAASE,KAAKC,QAAQF,GAAGO,KAAKC,MACzCK,SAAUd,EAASE,KAAKC,QAAQF,GAAGO,KAAKE,KACxCK,MAAOf,EAASE,KAAKC,QAAQF,GAAGc,MAChCC,SAAUhB,EAASE,KAAKC,QAAQF,GAAGgB,MAEvCtB,EAAgBuB,KAAKb,GACrBc,QAAQC,IAAIzB,GAEhB,EAAK0B,SAAS,CAAE1B,gBAAiBA,Q,uDAQzC,IAAI2B,EAAe,CACfC,QAAS,CACL,CACIC,MAAO,QACPC,MAAO,WAEX,CACID,MAAO,aACPC,MAAO,YACPC,KAAM,MACNC,MAAO,KAGX,CACIH,MAAO,YACPC,MAAO,WACPC,KAAM,MACNC,MAAO,KAGX,CACIH,MAAO,SACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAGX,CACIH,MAAO,eACPC,MAAO,WACPC,KAAM,MACNC,MAAO,MAKfC,KAAMC,KAAKnC,MAAMC,iBAGrB,OACI,6BACI,kBAAC,IAAD,CAAcmC,UAAQ,EAACC,YAAU,EAACC,SAAO,EAAC9B,KAAMoB,S,GAxExCW,a,kBCOTC,MAZf,WACI,OAEI,yBAAKC,UAAU,wCACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,4CAAd,6BCcDC,MAVf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,MAAU,6BACV,kBAAC,EAAD,QCHcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.fc924322.chunk.js","sourcesContent":["//Required imports\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\n\r\n\r\n//Class function.\r\nclass Employees extends Component {\r\n\r\n    state = {\r\n        employeeRecords: []\r\n    };\r\n\r\n    //API call for randomuser.me\r\n    componentDidMount = () => {\r\n        axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n            .then(response => {\r\n\r\n                var employeeRecords = []\r\n                for (let i = 0; i < response.data.results.length; i++) {\r\n                    let employee = {\r\n                        picture: <img alt={`${response.data.results[i].name.first} ${response.data.results[i].name.last}`} src={`${response.data.results[i].picture.medium}`}></img>,\r\n                        firstName: response.data.results[i].name.first,\r\n                        lastName: response.data.results[i].name.last,\r\n                        email: response.data.results[i].email,\r\n                        phoneNum: response.data.results[i].cell\r\n                    }\r\n                    employeeRecords.push(employee)\r\n                    console.log(employeeRecords);\r\n                }\r\n                this.setState({ employeeRecords: employeeRecords });\r\n\r\n            });\r\n    };\r\n\r\n    //Render to the table.\r\n    render() {\r\n\r\n        var employeeData = {\r\n            columns: [\r\n                {\r\n                    label: \"Image\",\r\n                    field: \"picture\"\r\n                },\r\n                {\r\n                    label: \"First Name\",\r\n                    field: \"firstName\",\r\n                    sort: \"asc\",\r\n                    width: 150\r\n\r\n                },\r\n                {\r\n                    label: \"Last Name\",\r\n                    field: \"lastName\",\r\n                    sort: \"asc\",\r\n                    width: 150\r\n\r\n                },\r\n                {\r\n                    label: \"E-Mail\",\r\n                    field: \"email\",\r\n                    sort: \"asc\",\r\n                    width: 150\r\n\r\n                },\r\n                {\r\n                    label: \"Phone Number\",\r\n                    field: \"phoneNum\",\r\n                    sort: \"asc\",\r\n                    width: 150\r\n\r\n                }\r\n\r\n            ],\r\n            rows: this.state.employeeRecords\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <MDBDataTable bordered responsive striped data={employeeData} />\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n//Required Export\r\nexport default Employees","import React from \"react\";\r\n\r\nfunction Header() {\r\n    return (\r\n        //Header Section displaying Jumbotron from Bootstrap.\r\n        <div className=\"jumbotron jumbotron-fluid bg-primary\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-2 col-lg-12 col-sm-12 text-white\">BigMac Web Design, Inc</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Required Export\r\nexport default Header;","//Required Imports.\nimport React from 'react';\nimport './App.css';\nimport Employees from \"./components/Employees\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport Header from \"./components/Header\";\n\n\n//App Function to return data from components.\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header /><br></br>\n      <Employees />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}